steps:
# Step 1: Pull the latest image or exit gracefully if it doesn't exist
- name: 'gcr.io/cloud-builders/docker' 
  entrypoint: 'bash'
  args: [
    '-c', 
    'docker pull gcr.io/propane-country-406506/node-backend:latest || exit 0'
  ]
  options:
  defaultLogsBucketBehavior: REGIONAL_USER_OWNED_BUCKET

# Step 2: Build the Docker image with specified tags
- name: 'gcr.io/cloud-builders/docker'
  args: [
    'build', 
    '-t', 
    'gcr.io/propane-country-406506/node-backend:latest',
    '-t', 
    'gcr.io/propane-country-406506/node-backend:latest',
    '.'
  ]

# Step 3: Apply Kubernetes configuration
- name: 'gcr.io/cloud-builders/kubectl'
  args: ['apply', '-f', 'k8s/']
  env:
  - 'CLOUDSDK_COMPUTE_ZONE=us-central1'
  - 'CLOUDSDK_CONTAINER_CLUSTER=autopilot-cluster-1'

# Step 4: Set the image for the Kubernetes deployment
- name: 'gcr.io/cloud-builders/kubectl'
  args: [
    'set', 
    'image', 
    'deployment/node-backend',  # Ensure this matches the correct deployment name
    'node-backend=gcr.io/propane-country-406506/node-backend:latest'
  ]
  env:
  - 'CLOUDSDK_COMPUTE_ZONE=us-central1'
  - 'CLOUDSDK_CONTAINER_CLUSTER=autopilot-cluster-1'
  - 'KUBE_NAMESPACE=default'

# Push images to Google Container Registry with tags
images: [
  'gcr.io/propane-country-406506/node-backend:latest',
  'gcr.io/propane-country-406506/node-backend:latest'
]
